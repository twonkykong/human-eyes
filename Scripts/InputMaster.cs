//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Scripts/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""Actions"",
            ""id"": ""0cbb1123-d510-41ef-aac2-9330a3ed854a"",
            ""actions"": [
                {
                    ""name"": ""MouseDelta"",
                    ""type"": ""Value"",
                    ""id"": ""e981d446-49ec-4d80-bad4-2c458bc78433"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""6f1c164c-0316-439e-a7fd-4a72068ddbc5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""e1a2df6f-271a-4cab-8c03-b524484206f1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HoldView"",
                    ""type"": ""Button"",
                    ""id"": ""2118e575-e26d-4a59-becb-e641d091079f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldCrosshair"",
                    ""type"": ""Button"",
                    ""id"": ""76713d00-2185-4ea8-a488-76237669befe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RelaxEyes"",
                    ""type"": ""Button"",
                    ""id"": ""b4326046-38bd-419e-a976-76e271ddaced"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1ca90522-8d42-41ae-b5e1-92fbeccea811"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee5a2a6d-b4dc-4a43-a72e-f683a6d986fe"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40e77154-c1cc-4e72-b5a3-bc97ef9cc652"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""PC"",
                    ""id"": ""eac9742c-62ac-4330-aa5f-efb49369b5dc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""22cda723-a797-4839-9a75-93120bc73133"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""37b7cf40-b61b-45b8-a360-b5497681a13a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9520ac80-0827-4174-9304-3430e25e170e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b7728873-6a22-4e6e-8f76-ba2f62e5c6d1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1572ea26-e35d-4602-9430-cb1400e7981e"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldCrosshair"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""435fab16-82a4-49b3-bc35-4602452ffb05"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RelaxEyes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Actions
        m_Actions = asset.FindActionMap("Actions", throwIfNotFound: true);
        m_Actions_MouseDelta = m_Actions.FindAction("MouseDelta", throwIfNotFound: true);
        m_Actions_LeftClick = m_Actions.FindAction("LeftClick", throwIfNotFound: true);
        m_Actions_Move = m_Actions.FindAction("Move", throwIfNotFound: true);
        m_Actions_HoldView = m_Actions.FindAction("HoldView", throwIfNotFound: true);
        m_Actions_HoldCrosshair = m_Actions.FindAction("HoldCrosshair", throwIfNotFound: true);
        m_Actions_RelaxEyes = m_Actions.FindAction("RelaxEyes", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Actions
    private readonly InputActionMap m_Actions;
    private IActionsActions m_ActionsActionsCallbackInterface;
    private readonly InputAction m_Actions_MouseDelta;
    private readonly InputAction m_Actions_LeftClick;
    private readonly InputAction m_Actions_Move;
    private readonly InputAction m_Actions_HoldView;
    private readonly InputAction m_Actions_HoldCrosshair;
    private readonly InputAction m_Actions_RelaxEyes;
    public struct ActionsActions
    {
        private @InputMaster m_Wrapper;
        public ActionsActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseDelta => m_Wrapper.m_Actions_MouseDelta;
        public InputAction @LeftClick => m_Wrapper.m_Actions_LeftClick;
        public InputAction @Move => m_Wrapper.m_Actions_Move;
        public InputAction @HoldView => m_Wrapper.m_Actions_HoldView;
        public InputAction @HoldCrosshair => m_Wrapper.m_Actions_HoldCrosshair;
        public InputAction @RelaxEyes => m_Wrapper.m_Actions_RelaxEyes;
        public InputActionMap Get() { return m_Wrapper.m_Actions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionsActions set) { return set.Get(); }
        public void SetCallbacks(IActionsActions instance)
        {
            if (m_Wrapper.m_ActionsActionsCallbackInterface != null)
            {
                @MouseDelta.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnMouseDelta;
                @LeftClick.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnLeftClick;
                @LeftClick.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnLeftClick;
                @LeftClick.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnLeftClick;
                @Move.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnMove;
                @HoldView.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnHoldView;
                @HoldView.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnHoldView;
                @HoldView.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnHoldView;
                @HoldCrosshair.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnHoldCrosshair;
                @HoldCrosshair.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnHoldCrosshair;
                @HoldCrosshair.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnHoldCrosshair;
                @RelaxEyes.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnRelaxEyes;
                @RelaxEyes.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnRelaxEyes;
                @RelaxEyes.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnRelaxEyes;
            }
            m_Wrapper.m_ActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseDelta.started += instance.OnMouseDelta;
                @MouseDelta.performed += instance.OnMouseDelta;
                @MouseDelta.canceled += instance.OnMouseDelta;
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @HoldView.started += instance.OnHoldView;
                @HoldView.performed += instance.OnHoldView;
                @HoldView.canceled += instance.OnHoldView;
                @HoldCrosshair.started += instance.OnHoldCrosshair;
                @HoldCrosshair.performed += instance.OnHoldCrosshair;
                @HoldCrosshair.canceled += instance.OnHoldCrosshair;
                @RelaxEyes.started += instance.OnRelaxEyes;
                @RelaxEyes.performed += instance.OnRelaxEyes;
                @RelaxEyes.canceled += instance.OnRelaxEyes;
            }
        }
    }
    public ActionsActions @Actions => new ActionsActions(this);
    public interface IActionsActions
    {
        void OnMouseDelta(InputAction.CallbackContext context);
        void OnLeftClick(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnHoldView(InputAction.CallbackContext context);
        void OnHoldCrosshair(InputAction.CallbackContext context);
        void OnRelaxEyes(InputAction.CallbackContext context);
    }
}
